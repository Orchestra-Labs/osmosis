# RPC Requests
server {
    listen 80;
    listen [::]:80;
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    ssl_certificate /etc/letsencrypt/live/lcd.testnet.node2.symphonychain.org/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/lcd.testnet.node2.symphonychain.org/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

    server_name ~^rpc\.testnet(\.node(\d+))?\.symphonychain\.org$;

    if ($scheme != "https") {
        rewrite ^ https://$host$request_uri? permanent;
    }

    # Named location block for reverse proxy
    location @reverse_proxy {
        proxy_pass http://localhost:26654;
        proxy_http_version 1.1;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Server $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Host $http_host;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_pass_request_headers on;
        proxy_max_temp_file_size 0;
        proxy_connect_timeout 900;
        proxy_send_timeout 900;
        proxy_read_timeout 900;
        proxy_buffer_size 128k;
        proxy_buffers 4 256k;
        proxy_busy_buffers_size 256k;
        proxy_temp_file_write_size 256k;
    }

    # CORS Headers
    add_header Cache-Control no-transform;
    add_header 'Access-Control-Allow-Origin' '*';
    add_header 'Access-Control-Allow-Methods' 'DELETE, GET, OPTIONS, PATCH, POST, PUT';
    add_header 'Access-Control-Allow-Headers' 'Origin, Accept, Accept-Encoding, Content-Type, X-Requested-With, X-Server-Time';
    add_header 'Access-Control-Max-Age' 3600;
    add_header 'Access-Control-Expose-Headers' 'Content-Length, X-Cosmos-Block-Height, X-Server-Time';

    # Reusing the @reverse_proxy named location block
    location /dump_consensus_state {
        allow 10.128.0.2;  # Internal IP for node1
        allow 10.128.0.3;  # Internal IP for node2
        allow 10.128.0.4;  # Internal IP for node3
        allow 10.128.0.5;  # Internal IP for node4
        deny all;          # Deny all other IP addresses

        try_files $uri @reverse_proxy;
    }

    location ^~ /.well-known {
        auth_basic off;
        allow all;
        try_files $uri @reverse_proxy;
    }

    location / {
        try_files $uri @reverse_proxy;
    }
}

# LCD Requests
server {
    listen 80;
    listen [::]:80;
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    ssl_certificate /etc/letsencrypt/live/lcd.testnet.node2.symphonychain.org/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/lcd.testnet.node2.symphonychain.org/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

    server_name ~^lcd\.testnet(\.node(\d+))?\.symphonychain\.org$;

    if ($scheme != "https") {
        rewrite ^ https://$host$request_uri? permanent;
    }

    # Named location block for reverse proxy
    location @reverse_proxy {
        proxy_pass http://localhost:1317;
        proxy_http_version 1.1;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Server $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Host $http_host;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_pass_request_headers on;
        proxy_max_temp_file_size 0;
        proxy_connect_timeout 900;
        proxy_send_timeout 900;
        proxy_read_timeout 900;
        proxy_buffer_size 128k;
        proxy_buffers 4 256k;
        proxy_busy_buffers_size 256k;
        proxy_temp_file_write_size 256k;
    }

    # CORS Headers
    add_header Cache-Control no-transform;
    add_header 'Access-Control-Allow-Origin' '*';
    add_header 'Access-Control-Allow-Methods' 'DELETE, GET, OPTIONS, PATCH, POST, PUT';
    add_header 'Access-Control-Allow-Headers' 'Origin, Accept, Accept-Encoding, Content-Type, X-Requested-With, X-Server-Time';
    add_header 'Access-Control-Max-Age' 3600;
    add_header 'Access-Control-Expose-Headers' 'Content-Length, X-Cosmos-Block-Height, X-Server-Time';

    # Reusing the @reverse_proxy named location block
    location /dump_consensus_state {
        allow 10.128.0.2;  # Internal IP for node1
        allow 10.128.0.3;  # Internal IP for node2
        allow 10.128.0.4;  # Internal IP for node3
        allow 10.128.0.5;  # Internal IP for node4
        deny all;          # Deny all other IP addresses

        try_files $uri @reverse_proxy;
    }

    location ^~ /.well-known {
        auth_basic off;
        allow all;
        try_files $uri @reverse_proxy;
    }

    location / {
        try_files $uri @reverse_proxy;
    }
}

# HTTP to HTTPS redirection
server {
    listen 80;
    server_name ~^lcd\.testnet(\.node(\d+))?\.symphonychain\.org$ ~^rpc\.testnet(\.node(\d+))?\.symphonychain\.org$;

    location / {
        return 301 https://$host$request_uri;
    }
}

# GRPC Requests
server {
    listen 9090 ssl http2;
    ssl_certificate /etc/letsencrypt/live/lcd.testnet.node2.symphonychain.org/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/lcd.testnet.node2.symphonychain.org/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

    server_name ~^grpc\.testnet(\.node(\d+))?\.symphonychain\.org$;

    location / {
        grpc_pass grpcs://localhost:9090;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
    }

    add_header Cache-Control no-transform;
}
