// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: osmosis/market/v1beta1/market.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the market module.
type Params struct {
	BasePool           github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=base_pool,json=basePool,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"base_pool" yaml:"base_pool"`
	PoolRecoveryPeriod uint64                                 `protobuf:"varint,2,opt,name=pool_recovery_period,json=poolRecoveryPeriod,proto3" json:"pool_recovery_period,omitempty" yaml:"pool_recovery_period"`
	MinStabilitySpread github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=min_stability_spread,json=minStabilitySpread,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"min_stability_spread" yaml:"min_stability_spread"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1ff5b4d62e19a3b, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetPoolRecoveryPeriod() uint64 {
	if m != nil {
		return m.PoolRecoveryPeriod
	}
	return 0
}

func init() {
	proto.RegisterType((*Params)(nil), "osmosis.market.v1beta1.Params")
}

func init() {
	proto.RegisterFile("osmosis/market/v1beta1/market.proto", fileDescriptor_d1ff5b4d62e19a3b)
}

var fileDescriptor_d1ff5b4d62e19a3b = []byte{
	// 331 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0x31, 0x4b, 0xc3, 0x40,
	0x1c, 0xc5, 0x73, 0x55, 0x4a, 0x0d, 0x0e, 0x12, 0x8a, 0x14, 0x85, 0x5c, 0x89, 0x20, 0x5d, 0x9a,
	0xa3, 0xed, 0xd6, 0x31, 0x38, 0x2a, 0xd4, 0x74, 0x73, 0x09, 0x97, 0xf4, 0xa8, 0x47, 0x73, 0xbd,
	0x70, 0x77, 0x16, 0x33, 0xf9, 0x15, 0x1c, 0x1d, 0xfb, 0x6d, 0xec, 0xd8, 0x51, 0x1c, 0x82, 0xb4,
	0x8b, 0x73, 0x3f, 0x81, 0xe4, 0x7a, 0x11, 0x87, 0x2e, 0x4e, 0xf7, 0xff, 0xff, 0x78, 0xf7, 0xfe,
	0x0f, 0x9e, 0x7d, 0xc5, 0x25, 0xe3, 0x92, 0x4a, 0xc4, 0xb0, 0x98, 0x11, 0x85, 0x16, 0xbd, 0x98,
	0x28, 0xdc, 0x33, 0xab, 0x9f, 0x09, 0xae, 0xb8, 0x73, 0x6e, 0x44, 0xbe, 0xa1, 0x46, 0x74, 0xd1,
	0x9c, 0xf2, 0x29, 0xd7, 0x12, 0x54, 0x4e, 0x7b, 0xb5, 0xf7, 0x5e, 0xb3, 0xeb, 0x23, 0x2c, 0x30,
	0x93, 0x4e, 0x64, 0x9f, 0xc4, 0x58, 0x92, 0x28, 0xe3, 0x3c, 0x6d, 0x81, 0x36, 0xe8, 0x9c, 0x06,
	0xc1, 0xaa, 0x80, 0xd6, 0x67, 0x01, 0xaf, 0xa7, 0x54, 0x3d, 0x3e, 0xc5, 0x7e, 0xc2, 0x19, 0x4a,
	0xb4, 0xbf, 0x79, 0xba, 0x72, 0x32, 0x43, 0x2a, 0xcf, 0x88, 0xf4, 0x6f, 0x48, 0xb2, 0x2b, 0xe0,
	0x59, 0x8e, 0x59, 0x3a, 0xf4, 0x7e, 0x8d, 0xbc, 0xb0, 0x51, 0xce, 0x23, 0xce, 0x53, 0xe7, 0xde,
	0x6e, 0x96, 0x28, 0x12, 0x24, 0xe1, 0x0b, 0x22, 0xf2, 0x28, 0x23, 0x82, 0xf2, 0x49, 0xab, 0xd6,
	0x06, 0x9d, 0xe3, 0x00, 0xee, 0x0a, 0x78, 0xb9, 0xff, 0x7d, 0x48, 0xe5, 0x85, 0x4e, 0x89, 0x43,
	0x43, 0x47, 0x1a, 0x3a, 0x2f, 0x76, 0x93, 0xd1, 0x79, 0x24, 0x15, 0x8e, 0x69, 0x4a, 0x55, 0x1e,
	0xc9, 0x4c, 0x10, 0x3c, 0x69, 0x1d, 0xe9, 0xf8, 0x77, 0xff, 0x8e, 0x6f, 0x02, 0x1c, 0xf2, 0xf4,
	0x42, 0x87, 0xd1, 0xf9, 0xb8, 0xa2, 0x63, 0x0d, 0x87, 0x8d, 0xb7, 0x25, 0xb4, 0xbe, 0x97, 0x10,
	0x04, 0xb7, 0xab, 0x8d, 0x0b, 0xd6, 0x1b, 0x17, 0x7c, 0x6d, 0x5c, 0xf0, 0xba, 0x75, 0xad, 0xf5,
	0xd6, 0xb5, 0x3e, 0xb6, 0xae, 0xf5, 0xd0, 0xff, 0x73, 0xde, 0x94, 0xd3, 0x4d, 0x71, 0x2c, 0xab,
	0x05, 0x2d, 0xfa, 0x03, 0xf4, 0x5c, 0x95, 0xaa, 0xe3, 0xc4, 0x75, 0x5d, 0xcf, 0xe0, 0x27, 0x00,
	0x00, 0xff, 0xff, 0xb3, 0x64, 0xbc, 0xff, 0xf3, 0x01, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BasePool.Equal(that1.BasePool) {
		return false
	}
	if this.PoolRecoveryPeriod != that1.PoolRecoveryPeriod {
		return false
	}
	if !this.MinStabilitySpread.Equal(that1.MinStabilitySpread) {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MinStabilitySpread.Size()
		i -= size
		if _, err := m.MinStabilitySpread.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.PoolRecoveryPeriod != 0 {
		i = encodeVarintMarket(dAtA, i, uint64(m.PoolRecoveryPeriod))
		i--
		dAtA[i] = 0x10
	}
	{
		size := m.BasePool.Size()
		i -= size
		if _, err := m.BasePool.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintMarket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintMarket(dAtA []byte, offset int, v uint64) int {
	offset -= sovMarket(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BasePool.Size()
	n += 1 + l + sovMarket(uint64(l))
	if m.PoolRecoveryPeriod != 0 {
		n += 1 + sovMarket(uint64(m.PoolRecoveryPeriod))
	}
	l = m.MinStabilitySpread.Size()
	n += 1 + l + sovMarket(uint64(l))
	return n
}

func sovMarket(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMarket(x uint64) (n int) {
	return sovMarket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BasePool", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BasePool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolRecoveryPeriod", wireType)
			}
			m.PoolRecoveryPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolRecoveryPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinStabilitySpread", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMarket
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMarket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinStabilitySpread.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMarket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMarket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMarket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMarket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMarket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMarket
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMarket
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMarket
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMarket        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMarket          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMarket = fmt.Errorf("proto: unexpected end of group")
)
