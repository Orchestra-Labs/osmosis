syntax = "proto3";
package osmosis.market.v1beta1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "osmosis/market/v1beta1/market.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/osmosis-labs/osmosis/v23/x/market/types";

// Query defines the gRPC querier service.
service Query {
  // Swap returns simulated swap amount.
  rpc Swap(QuerySwapRequest) returns (QuerySwapResponse) {
    option (google.api.http).get = "/osmosis/market/v1beta1/swap";
  }

  // OsmosisPoolDelta returns osmosis_pool_delta amount.
  rpc OsmosisPoolDelta(QueryOsmosisPoolDeltaRequest)
      returns (QueryOsmosisPoolDeltaResponse) {
    option (google.api.http).get = "/osmosis/market/v1beta1/osmosis_pool_delta";
  }

  // Params queries all parameters.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/osmosis/market/v1beta1/params";
  }
}

// QuerySwapRequest is the request type for the Query/Swap RPC method.
message QuerySwapRequest {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // offer_coin defines the coin being offered (i.e. 1000000uluna)
  string offer_coin = 1;
  // ask_denom defines the denom of the coin to swap to
  string ask_denom = 2;
}

// QuerySwapResponse is the response type for the Query/Swap RPC method.
message QuerySwapResponse {
  // return_coin defines the coin returned as a result of the swap simulation.
  cosmos.base.v1beta1.Coin return_coin = 1 [ (gogoproto.nullable) = false ];
}

// QueryOsmosisPoolDeltaRequest is the request type for the
// Query/OsmosisPoolDelta RPC method.
message QueryOsmosisPoolDeltaRequest {}

// QueryOsmosisPoolDeltaResponse is the response type for the
// Query/OsmosisPoolDelta RPC method.
message QueryOsmosisPoolDeltaResponse {
  // osmosis_pool_delta defines the gap between the OsmosisPool and the
  // OsmosisBasePool
  bytes osmosis_pool_delta = 1 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params defines the parameters of the module.
  Params params = 1 [ (gogoproto.nullable) = false ];
}
